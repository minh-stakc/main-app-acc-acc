<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>ACC - Charts</title>

    <!-- Custom fonts for this template-->
    <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="css/sb-admin-2.min.css" rel="stylesheet">

</head>

<body id="page-top">

    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/index">
                <div class="sidebar-brand-text mx-2">Automatic Crop Caretaker</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">

            <!-- Nav Item - Dashboard -->
            <li class="nav-item active">
                <a class="nav-link" href="/dashboard">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Dashboard</span></a>
            </li>
            <!-- Nav Item - Pages Collapse Menu -->
            <!-- Nav Item - Utilities Collapse Menu -->
            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Modes
            </div>
            <li class="nav-item">
                <a class="nav-link" href="/manual">
                    <i class="fas fa-fw fa-cog"></i>
                    <span>Manual</span></a>
            </li>

            <hr class="sidebar-divider">

            <div class="sidebar-heading">
                Statistics
            </div>

            <!-- Nav Item - Pages Collapse Menu -->

            <!-- Nav Item - Charts -->
            <li class="nav-item">
                <a class="nav-link" href="/charts">
                    <i class="fas fa-fw fa-chart-area"></i>
                    <span>Charts</span></a>
            </li>

            <!-- Nav Item - Tables -->
            <li class="nav-item">
                <a class="nav-link" href="/tables">
                    <i class="fas fa-fw fa-table"></i>
                    <span>Tables</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider d-none d-md-block">

            <!-- Sidebar Toggler (Sidebar) -->
            <div class="text-center d-none d-md-inline">
                <button class="rounded-circle border-0" id="sidebarToggle"></button>
            </div>

            <!-- Sidebar Message -->

        </ul>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">

                <!-- Topbar -->
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>

                    <!-- Topbar Search -->
                    <form
                        class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
                        <div class="input-group">
                            <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..."
                                aria-label="Search" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button">
                                    <i class="fas fa-search fa-sm"></i>
                                </button>
                            </div>
                        </div>
                    </form>

                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">

                        <!-- Nav Item - Search Dropdown (Visible Only XS) -->
                        <li class="nav-item dropdown no-arrow d-sm-none">
                            <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fas fa-search fa-fw"></i>
                            </a>
                            <!-- Dropdown - Messages -->
                            <div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in"
                                aria-labelledby="searchDropdown">
                                <form class="form-inline mr-auto w-100 navbar-search">
                                    <div class="input-group">
                                        <input type="text" class="form-control bg-light border-0 small"
                                            placeholder="Search for..." aria-label="Search"
                                            aria-describedby="basic-addon2">
                                        <div class="input-group-append">
                                            <button class="btn btn-primary" type="button">
                                                <i class="fas fa-search fa-sm"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </li>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small" id="usernamespan"><%= firstname %> <%= lastname %></span>
                                <img class="img-profile rounded-circle"
                                    src="img/undraw_profile.svg">
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                                aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Profile
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Logout
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    <div class="d-sm-flex align-items-center justify-content-between mb-4">
                        <h1 class="h3 mb-2 text-gray-800">Charts</h1>
                        <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
                            <i class="fas fa-sync-alt fa-sm text-white-50"></i>
                            Update Statistics
                        </a>
                    </div>
                    
                    <!-- Content Row -->
                    <div class="row">
                        <div class="row" id="contentContainer"></div>
                    </div>
                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->

            <!-- Footer -->
            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <span>Copyright &copy; HNM Website 2023</span>
                    </div>
                </div>
            </footer>
            <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">Ã—</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" id="logoutBtn">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap core JavaScript-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="js/sb-admin-2.min.js"></script>

    <!-- Page level plugins -->
    <script src="vendor/chart.js/Chart.min.js"></script>

    <!-- Page level custom scripts -->
    <!-- <script src="js/demo/chart-area-demo.js"></script>
    <script src="js/demo/chart-pie-demo.js"></script>
    <script src="js/demo/chart-bar-demo.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <script>
          document.getElementById('logoutBtn').addEventListener('click', handleLogout);
          function handleLogout() {
          axios.post('/logout', {withCredentials:true})
              .then(() => {
              // Redirect the page to the login page
              window.location.href = '/';
              })
              .catch((error) => {
              console.error('Logout failed:', error);
              });
          }
      </script>

        <script>
            const chartVariables = [
                { chartId: 'myChartPH', label: 'pH' },
                { chartId: 'myChartTDS', label: 'TDS' },
                { chartId: 'myChartLux', label: 'Lux' },
                { chartId: 'myChartHumidity', label: 'Humidity' },
                { chartId: 'myChartTemperature', label: 'Temperature' },
                { chartId: 'myChartHeatIndex', label: 'Heat Index' },
                { chartId: 'myChartCorrected_PPM', label: 'Corrected PPM' },
                { chartId: 'myChartDustDensity', label: 'Dust Density' },
                { chartId: 'myChartRunningAverage', label: 'Running Average' },
                { chartId: 'myChartNitrogen', label: 'Nitrogen' },
                { chartId: 'myChartPhosphorus', label: 'Phosphorus' },
                { chartId: 'myChartPotassium', label: 'Potassium' },
                { chartId: 'myChartpHsoil', label: 'pH Soil' },
                { chartId: 'myChartEC', label: 'EC' },
                { chartId: 'myChartTempsoil', label: 'Soil Temperature' },
                { chartId: 'myChartHumsoil', label: 'Soil Humidity' },
            ];

            function createChartDiv(variable) {
                const chartDiv = document.createElement('div');
                chartDiv.classList.add('col-xl-6', 'col-lg-6');
                chartDiv.innerHTML = `
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">${variable.label}</h6>
                        </div>
                        <div class="card-body">
                            <div class="chart-area">
                                <canvas id="canva${variable.chartId}"></canvas>
                            </div>
                            <hr>
                        </div>
                    </div>
                `;
                return chartDiv;
            }

            const contentContainer = document.getElementById('contentContainer');
            chartVariables.forEach(variable => {
                const chartDiv = createChartDiv(variable);
                contentContainer.appendChild(chartDiv);
            });
        </script>

      <script type="module">
        let myChartPH;
        let myChartTDS;
        let myChartLux;
        let myChartHumidity;
        let myChartTemperature;
        let myChartHeatIndex;
        let myChartCorrected_PPM;
        let myChartDustDensity;
        let myChartRunningAverage;
        let myChartNitrogen;
        let myChartPhosphorus;
        let myChartPotassium;
        let myChartpHsoil;
        let myChartEC;
        let myChartTempsoil;
        let myChartHumsoil;

        let chartDataPH = [];
        let chartDataTDS = [];
        let chartDataLux = [];
        let chartDataHumidity = [];
        let chartDataTemperature = [];
        let chartDataHeatIndex = [];
        let chartDataCorrected_PPM = [];
        let chartDataDustDensity = [];
        let chartDataRunningAverage = [];
        let chartDataNitrogen = [];
        let chartDataPhosphorus = [];
        let chartDataPotassium = [];
        let chartDatapHsoil = [];
        let chartDataEC = [];
        let chartDataTempsoil = [];
        let chartDataHumsoil = [];
        function createChart(chartData, chartId,id, label, num, standardValue1, standardValue2, mode1, mode2, name1, name2) {
            if (chartId) {
                chartId.destroy();
            }
            console.log(`canva${id}`)
            chartId = new Chart(`canva${id}`, {
                type: 'line',
                data: {
                    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                    datasets: [{
                        label: label,
                        data: chartData,
                        lineTension: 0.3,
                        backgroundColor: "rgba(78, 115, 223, 0.05)",
                        borderColor: "rgba(78, 115, 223, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointBorderColor: "rgba(78, 115, 223, 1)",
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                        pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    
                    
                    legend: {
                        display: false
                    },
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        titleMarginBottom: 10,
                        titleFontColor: '#6e707e',
                        titleFontSize: 14,
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        intersect: false,
                        mode: 'index',
                        caretPadding: 10,
                        callbacks: {
                            label: function (tooltipItem, chart) {
                                var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                                return datasetLabel + ': ' + number_format(tooltipItem.yLabel) + ' ' + num;
                            }
                        }
                    },
                    plugins: {
                        annotation: {
                            annotations: {
                                line1: {
                                type: 'line',
                                yMin: 1,
                                yMax: 1,
                                borderColor: 'rgb(255, 99, 132)',
                                borderWidth: 2,
                                }
                            }
                        }
                    }
                }
            });
            return chartId;
        }
        function getChartData(responseProp) {
            if (Array.isArray(responseProp) && responseProp.length > 0) {
                return responseProp;
            } else {
                return Array(20).fill(0);
            }
        }
        function fetchDataAndUpdateCharts() {
            axios.get('/api/getChartData')
                .then((response) => {
                    response = response.data;
                    // Assign values to variables based on the response object
                    chartDataPH = getChartData(response.PH);
                    chartDataTDS = getChartData(response.TDS);
                    chartDataLux = getChartData(response.Lux);
                    chartDataHumidity = getChartData(response.Humidity);
                    chartDataTemperature = getChartData(response.Temperature);
                    chartDataHeatIndex = getChartData(response.HeatIndex);
                    chartDataCorrected_PPM = getChartData(response.Corrected_PPM);
                    chartDataDustDensity = getChartData(response.DustDensity);
                    chartDataRunningAverage = getChartData(response.RunningAverage);
                    chartDataNitrogen = getChartData(response.Nitrogen);
                    chartDataPhosphorus = getChartData(response.Phosphorus);
                    chartDataPotassium = getChartData(response.Potassium);
                    chartDatapHsoil = getChartData(response.pHsoil);
                    chartDataEC = getChartData(response.EC);
                    chartDataTempsoil = getChartData(response.Tempsoil);
                    chartDataHumsoil = getChartData(response.Humsoil);
                })
                .catch((error) => {
                    console.error(error);
                });
                //water
                myChartPH = createChart(chartDataPH, myChartPH, 'myChartPH', 'pH', 'pH', 5.5, 6.5, true, true, 'lower standard', 'upper standard');
                myChartTDS = createChart(chartDataTDS, myChartTDS, 'myChartTDS', 'TDS', 'ppm', 600, 0, true, false, 'upper standard', null);
                //light
                myChartLux = createChart(chartDataLux, myChartLux, 'myChartLux', 'Lux', 'Lux', 10000, 15000, true ,true, 'lower standard', 'upper standard');
                //air
                myChartHumidity = createChart(chartDataHumidity, myChartHumidity, 'myChartHumidity', 'Humidity', '%', 55, 45, true, true, 'seed and young tree', 'matured tree');
                myChartTemperature = createChart(chartDataTemperature, myChartTemperature, 'myChartTemperature', 'Temperature', 'Â°C', 25, 27, true, true, '', '');
                myChartHeatIndex = createChart(chartDataHeatIndex, myChartHeatIndex, 'myChartHeatIndex', 'Heat Index', 'Â°C', null, null, false, false, null, null);
                myChartCorrected_PPM = createChart(chartDataCorrected_PPM, myChartCorrected_PPM, 'myChartCorrected_PPM', 'Corrected PPM', 'PPM', 375, 1250, true, true, 'outdoors', 'indoors');
                myChartDustDensity = createChart(chartDataDustDensity, myChartDustDensity, 'myChartDustDensity', 'Dust Density', 'mg/m3', null, null, false, false, null, null);
                myChartRunningAverage = createChart(chartDataRunningAverage, myChartRunningAverage, 'myChartRunningAverage', 'Running Average', 'mg/m3', null, null, false, false, null, null);
                //soil
                myChartNitrogen = createChart(chartDataNitrogen, myChartNitrogen, 'myChartNitrogen', 'Nitrogen', 'mg/kg', 60, 50, true, true, 'seed and young tree', 'matured tree');
                myChartPhosphorus = createChart(chartDataPhosphorus, myChartPhosphorus, 'myChartPhosphorus', 'Phosphorus', 'mg/kg', 50, 70, true, true, 'lower limit', 'upper limit');
                myChartPotassium = createChart(chartDataPotassium, myChartPotassium, 'myChartPotassium', 'Potassium', 'mg/kg', 70, 100, true, true, 'lower limit', 'upper limit');
                myChartpHsoil = createChart(chartDatapHsoil, myChartpHsoil, 'myChartpHsoil', 'pH Soil', 'pH', 5, 6, true, true, 'lower limit', 'upper limit');
                myChartEC = createChart(chartDataEC, myChartEC, 'myChartEC', 'EC', 'Î¼S/cm', 8000, 80000, 'lower limit', 'upper limit');
                myChartTempsoil = createChart(chartDataTempsoil, myChartTempsoil, 'myChartTempsoil', 'Soil Temperature', 'Â°C', 27.5, 22.5, 'seed and young tree', 'mature tree');
                myChartHumsoil = createChart(chartDataHumsoil, myChartHumsoil, 'myChartHumsoil', 'Soil Humidity', '%', 60, 80, true, true, 'mature tree', 'seedling and harvest');
        }
        fetchDataAndUpdateCharts();
        setInterval(fetchDataAndUpdateCharts, 7000); 
      </script>
</body>

</html>